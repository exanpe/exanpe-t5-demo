<html t:type="componentDemoLayout" title="Authorize annotation demo"
      xmlns:t="http://tapestry.apache.org/schema/tapestry_5_1_0.xsd"
      xmlns:p="tapestry:parameter"
      xmlns:ex="tapestry-library:exanpe">

   <p:description>
   		This page displays the <b>authorize annotation</b> on a method.
   		This is really useful to restrict a method access depending on the user roles, and then defining an automatic Java route.
   		As for the Authorize component and mixin, role definition can be controlled with <b>any</b>, <b>all</b> and <b>not</b> rules.<br/>
   		
   		<ul>
   			<li>Select a role and submit it to "commit" your choice.</li>
   			<li>Click the bottom link</li>
   			<li>The server side method will be triggered according to the role previously chosen</li>
   		</ul>
   		Please not that in the annotation the roles are not declared with comma (,) separated values, but as an String[].
   </p:description>

	<p:code>
		<!-- form -->
		<t:form>
			<fieldset>
				<legend>Choose your role :</legend>
				<t:radiogroup t:id="role" t:value="role">
		            <t:radio t:value="literal:ADMIN"/> Admin<br/>
		            <t:radio t:value="literal:USER"/> User<br/>
		            <t:radio t:value="literal:ANONYMOUS"/> Anonymous<br/>
		        </t:radiogroup>
		        <t:submit/>
	        </fieldset>
		</t:form>
		<br/><hr/><br/>
		
		Your current role is <b>${currentRole }</b> : <br/><br/>
		
		<fieldset>
			<legend>Click this link and see the result :</legend>
			
			<t:actionlink t:id="trigger">Click me</t:actionlink><br/><br/>
			The trigger result is : ${result }
		</fieldset>
		<br/><br/>
	</p:code>
	
	<p:javaCode><![CDATA[
	public class Example4 extends BaseAuthorize
	{
	    @Property
	    @Persist(PersistenceConstants.FLASH)
	    private String result;
	
	    @OnEvent(value = EventConstants.ACTION, component = "trigger")
	    @Authorize(all = "ROLE_USER")
	    void clickUser()
	    {
	        System.out.println("role");
	        result = "Role route called";
	    }
	
	    @OnEvent(value = EventConstants.ACTION, component = "trigger")
	    @Authorize(all = "ROLE_ADMIN")
	    void clickAdmin()
	    {
	        System.out.println("admin");
	        result = "Admin route used";
	    }
	
	    @OnEvent(value = EventConstants.ACTION, component = "trigger")
	    @Authorize(not =
	    { "ROLE_USER", "ROLE_ADMIN" })
	    void clickAnonymous()
	    {
	        System.out.println("ano");
	        result = "Anonymous route triggered on server";
	    }
	}
	]]></p:javaCode>
    
</html>
